# GitHub Actions 工作流程名称
name: Atask

# 触发工作流程的条件
on:
  # 允许手动触发
  workflow_dispatch:

# 定义一个或多个作业 (jobs)
jobs:
  # 作业的唯一ID
  build:
    # 作业运行的虚拟环境
    runs-on: ubuntu-latest
    # 设置全局环境变量
    env:
      DEBUG_MODE: ${{ secrets.DEBUG_MODE || 'false' }}

    # 作业的步骤
    steps:
      # 第一步：检出（下载）你的代码到虚拟环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步 (新增/缓存方案)：缓存并恢复结果文件
      # 这一步会尝试恢复上一次运行保存的 previous_results.json 文件
      # 如果找到了，脚本就能进行比较；如果没找到（比如第一次运行），则会跳过。
      - name: Restore results file from cache
        uses: actions/cache/restore@v4
        id: cache-restore
        with:
          path: previous_results.json
          key: finder-results-v1-${{ github.run_id }}
          restore-keys: |
            finder-results-v1-

      # 调试步骤：检查缓存是否正常工作
      - name: Debug cache status
        run: |
          echo "Cache key: finder-results-v1"
          echo "Cache hit: ${{ steps.cache-results.outputs.cache-hit }}"
          echo 'Cache primary key: ${{ steps.cache-results.outputs.cache-primary-key }}'
          echo 'Cache matched key: ${{ steps.cache-results.outputs.cache-matched-key }}'
          if [ -f previous_results.json ]; then
            echo "previous_results.json exists"
            echo "File size: $(wc -c < previous_results.json) bytes"
            echo "Last modified: $(stat -c %y previous_results.json)"
            echo "File content preview:"
            head -c 200 previous_results.json
            echo ""
          else
            echo "previous_results.json does not exist"
          fi

      # 第三步：安装和配置虚拟显示服务 (Xvfb)
      - name: Start Xvfb
        run: Xvfb :99 -screen 0 1024x768x24 &

      # 第四步：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 第五步：安装依赖库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 第六步：运行你的 Python 脚本
      # 在这一步结束时，actions/cache 会自动检查 previous_results.json 是否有变化
      # 如果有变化，它会自动将新版本存入缓存，覆盖旧版本。
      - name: Run Python script
        env:
          DISPLAY: ':99'
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TARGET_URL: ${{ secrets.TARGET_URL }}
          TARGET_CITY: ${{ secrets.TARGET_CITY }}
          DEBUG_MODE: ${{ secrets.DEBUG_MODE || 'false' }}
        run: python main.py

      # 第七步 (新增)：上传结果和调试文件作为构建产物
      - name: Save results file to cache
        uses: actions/cache/save@v4
        with:
          path: previous_results.json
          key: finder-results-v1-${{ github.run_id }}
      - name: Upload results and debug files
        uses: actions/upload-artifact@v4
        # 只有在调试模式或脚本失败时才上传文件
        if: always() && (env.DEBUG_MODE == 'true' || failure())
        with:
          # 构建产物的名称
          name: script-output
          # 要上传的文件路径
          path: |
            previous_results.json
            debug*.html
          # 如果找不到文件也不要报错
          if-no-files-found: ignore
          # 新增：设置保留天数
          retention-days: 1